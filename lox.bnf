program        ::= declaration* EOF ;

declaration    ::= funDecl
               |   varDecl
               |   statement ;

funDecl        ::= "fun" function ;
function       ::= IDENTIFIER "(" parameters? ")" block ;
parameters     ::= IDENTIFIER ( "," IDENTIFIER )* ;

statement      ::= exprStmt
               |   forStmt
               |   ifStmt
               |   printStmt
               |   returnStmt
               |   whileStmt
               |   block ;

forStmt        ::= "for" "(" ( varDecl | exprStmt | ";" )
                      expression? ";"
                      expression? ")" statement ;

ifStmt         ::= "if" "(" expression ")" statement ( "else" statement )? ;
whileStmt      ::= "while" "(" expression ")" statement ;
returnStmt     ::= "return" expression? ";" ;
block          ::= "{" declaration* "}" ;

varDecl        ::= "var" IDENTIFIER ( "=" expression )? ";" ;
printStmt      ::= "print" expression ";" ;
exprStmt       ::= expression ";" ;

expression     ::= assignment ;
assignment     ::= IDENTIFIER "=" assignment | equality ;
equality       ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison     ::= addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       ::= multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication ::= unary ( ( "/" | "*" ) unary )* ;
unary          ::= ( "!" | "-" ) unary | call ;
call           ::= primary ( "(" arguments? ")" )* ;
arguments      ::= expression ( "," expression )* ;
primary        ::= NUMBER | STRING | "false" | "true" | "nil"
               |   "(" expression ")"
               |   IDENTIFIER ;
