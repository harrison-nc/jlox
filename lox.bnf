program        ::= declaration* EOF ;
declaration    ::= varDecl
                   | funDecl
                   | statement ;

varDecl        ::= "var" IDENDIFIER ( "=" expression )? ";" ;
funDecl        ::= "fun" function ;
function       ::= IDENDIFIER "(" parameters? ")" block ;
parameters     ::= IDENDIFIER ( "," IDENDIFIER )* ;

statement      ::= exprStmt
                   | ifStmt
                   | forStmt
                   | whileStmt
                   | returnStmt
                   | breakStmt
                   | block ;

ifStmt         ::= "if" "(" expression ")" statement
                    ( "else" statement )? ;

forStmt        ::= "for" "(" ( varDecl | exprStmt | ";" )
                             expression? ";"
                             expression? ")" statement ;

whileStmt      ::= "while" "(" expression ")" statement ;
breakStmt      ::= "break" ";" ;
block          ::= "{" declaration* "}" ;
returnStmt     ::= "return" expression? ";" ;
exprStmt       ::= expression ";" ;

expression     ::= assignment ;
assignment     ::= IDENDIFIER "=" assignment | logic_or ;
logic_or       ::= logic_and ( "or" logic_and )* ;
logic_and      ::= equality ( "and" equality )* ;
equality       ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison     ::= addition ( ( ">" | ">=" | "<" | "<=" ) addition)* ;
addition       ::= multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication ::= unary ( ( "/" | "*" ) unary )* ;
unary          ::= ( "!" | "-" ) unary | call ;
call           ::= primary ( "(" arguments ")" )* ;
arguments      ::= expression ( "," expression )* ;

primary        ::= NUMBER | STRING | "false" | "true" | "nil"
                   | "(" expression ")"
                   | fun_expr
                   | IDENDIFIER ;

fun_expr        ::= "fun" "(" parameters ")" | logic_or ;
